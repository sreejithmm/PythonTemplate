{

	"competitive": {
		"prefix": "startpy",
		"body": [
			"#https://www.codechef.com/UADPIP01/problems/MXAD",
			"import numpy as np",
			"import logging",
			"",
			"logging.basicConfig(filename='logger.log', encoding='utf-8', level=logging.DEBUG)",
			"",
			"import sys",
			"import math",
			"import bisect",
			"from sys import stdin,stdout",
			"from math import gcd,floor,sqrt,log",
			"from collections import defaultdict as dd",
			"from bisect import bisect_left as bl,bisect_right as br",
			"sys.setrecursionlimit(100000000)",
			"inp    =lambda: int(input())",
			"# strng  =lambda: input().strip()",
			"# jn     =lambda x,l: x.join(map(str,l))",
			"# strl   =lambda: list(input().strip())",
			"# mul    =lambda: map(int,input().strip().split())",
			"# mulf   =lambda: map(float,input().strip().split())",
			"# seq    =lambda: list(map(int,input().strip().split()))",
			"# ceil   =lambda x: int(x) if(x==int(x)) else int(x)+1",
			"# ceildiv=lambda x,d: x//d if(x%d==0) else x//d+1",
			"# flush  =lambda: stdout.flush()",
			"# stdstr =lambda: stdin.readline()",
			"# stdint =lambda: int(stdin.readline())",
			"# stdpr  =lambda x: stdout.write(str(x))",
			"logl   = lambda l: logging.info(str(l))",
			"logw   = lambda l: logging.warning(str(l))",
			"mod=1000000007",
			"",
			"",
			"def main():",
			"    tests = input()",
			"    tests = int(tests)",
			"    logging.basicConfig(filename='logger.log', encoding='utf-8', level=logging.DEBUG)",
			"    while (tests):",
			"        n = input()",
			"        n = int(n)",
			"        logging.warning('start of test:%d',n)",
			"        tests = tests-1",
			"    return 0",

			"if __name__ ==\"__main__\":",
			"    main()"
		],
		"description": "competitive"
	  }

}